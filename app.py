import streamlit as st
import pandas as pd
import datetime
import io
import arabic_reshaper
from bidi.algorithm import get_display
from reportlab.lib.pagesizes import A4, landscape
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, PageBreak
from reportlab.lib.styles import ParagraphStyle
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase import pdfmetrics
import pytz  # ูุฅุนุฏุงุฏ ุงูุชูููุช ุงููุญูู

# ---------- Arabic helpers ----------
def fix_arabic(text):
    if pd.isna(text):
        return ""
    reshaped = arabic_reshaper.reshape(str(text))
    return get_display(reshaped)

def fill_down(series):
    return series.ffill()

def replace_muaaqal_with_confirm_safe(df):
    return df.replace('ูุนูู', 'ุชู ุงูุชุฃููุฏ')

def classify_city(city):
    if pd.isna(city) or str(city).strip() == '':
        return "Other City"
    city = str(city).strip()
    city_map = {
        "ููุทูุฉ ุตุจุงุญ ุงูุณุงูู": {"ุตุจุงุญ ุงูุณุงูู","ุงูุนุฏุงู","ุงููุณููุฉ","ุฃุจู ุงูุญุตุงููุฉ","ูุจุงุฑู ุงููุจูุฑ",
                              "ุงููุตูุฑ","ุงููุฑูู","ุงููููุทูุณ","ุงููุณุงูู"},
        "ููุทูุฉ ุงูููุจููุฉ": {"ุงูููุทุงุณ","ุงูููุจููุฉ"},
        "ููุทูุฉ ุงููุญูุญูู": {"ุงููุญูุญูู ุงูุตูุงุนูุฉ","ุฃุจู ุญูููุฉ","ุฃุจู ูุทูุฑุฉ","ุงููููู","ุงููุญูุญูู"},
        "ููุทูุฉ ุฌุงุจุฑ ุงูุงุญูุฏ": {"ูุฏููุฉ ุฌุงุจุฑ ุงูุฃุญูุฏ","ุดูุงู ุบุฑุจ ุงูุตููุจูุฎุงุช","ุงูุฑุญุงุจ","ุตุจุงุญ ุงููุงุตุฑ",
                              "ุงููุฑุฏูุณ","ุงูุฃูุฏูุณ","ุงูููุถุฉ","ุบุฑูุงุทุฉ","ุงูุฏูุญุฉ",
                              "ุฌููุจ ุงูุฏูุญุฉ / ุงูููุฑูุงู","ุงูููุฑูุงู"},
        "ููุทูุฉ ุงูุนุงุฑุถูุฉ": {"ุงูุนุงุฑุถูุฉ ุญุฑููุฉ","ุงูุนุงุฑุถูุฉ","ุงูุนุงุฑุถูุฉ ุงูููุทูุฉ ุงูุตูุงุนูุฉ",
                            "ุงูุตููุจุฎุงุช","ุงูุฑู","ุงุดุจูููุฉ","ุงูุฑูุนู"},
        "ููุทูุฉ ุณููู": {"ูุจุงุฑู ุงูุนุจุฏุงููู ุบุฑุจ ูุดุฑู","ุณููู","ุจูุงู","ุงูุฑููุซูุฉ","ูุดุฑู"},
        "ููุทูุฉ ุงูุณุงูููุฉ": {"ุงูุณุงูููุฉ","ููุฏุงู ุญููู","ุงูุจุฏุน"},
        "ููุทูุฉ ุงูุฌูุฑุงุก": {"ุงูุฌูุฑุงุก","ุงูุตูุจูุฉ ุงูุตูุงุนูุฉ","ุงูุตููุจูุฉ ุงูุตูุงุนูุฉ","ูุฒุงุฑุน ุงูุตููุจูุฉ",
                          "ุงูุตููุจูุฉ ุงูุณูููุฉ","ูุฏููุฉ ุณุนุฏ ุงูุนุจุฏุงููู","ุงูุตููุจูุฉ","ุฃูุบุฑุฉ","ุณูุฑุงุจ ุงูุบุฑุฉ",
                          "ุฌููุจ ุงูุบุฑุฉ","ุงููุตุฑ","ุงููุนูู","ูุนุณูุฑุงุช ุงูุฌูุฑุงุก","ุชููุงุก","ุงููุณูู",
                          "ุงูุฌูุฑุงุก ุงูููุทูุฉ ุงูุตูุงุนูุฉ","ุฌูุงุฎูุฑ ุงูุฌูุฑุงุก","ุงูุนููู","ุงููุงุญุฉ",
                          "ุงุณุทุจูุงุช ุงูุฌูุฑุงุก","ูุฒุงุฑุน ุงูุทููุจูุฉ"},
        "ููุทูุฉ ุฎูุทุงู": {"ุฎูุทุงู"},
        "ููุทูุฉ ุงููุฑูุงููุฉ": {"ุงููุฑูุงููุฉ"},
        "ููุทูู ุงูุตุจุงุญูุฉ": {"ุงุณูุงู ุงููุฑูู","ุงูุธูุฑ","ุฌุงุจุฑ ุงูุนูู","ุงูุนูููุฉ","ุงูุฑูุฉ","ุงููููุน",
                           "ููุฏ ุงูุฃุญูุฏ","ุงูุตุจุงุญูุฉ","ูุฏูุฉ","ุงูุฌููุนู","ุนูู ุตุจุงุญ ุงูุณุงูู"},
        "ููุทูุฉ ุตุจุงุญ ุงูุงุญูุฏ": {"ุตุจุงุญ ุงูุฃุญูุฏ3","ุงูุฌููุนุฉ","ุตุจุงุญ ุงูุฃุญูุฏ","ูุฏููุฉ ุตุจุงุญ ุงูุฃุญูุฏ",
                             "ูููุงุก ุนุจุฏ ุงููู","ุจููุฏุฑ","ุงูููุฑุฉ","ุงูุฎูุฑุงู","ุงูุฒูุฑ","ุงููููุตุจ",
                             "ุดูุงู ุงูุฃุญูุฏู","ุฌููุจ ุงูุฃุญูุฏู","ุดุฑู ุงูุฃุญูุฏู","ูุณุท ุงูุฃุญูุฏู",
                             "ุงูุฃุญูุฏู","ุบุฑุจ ุงูุฃุญูุฏู","ุงู ุงููููุงู","ุงูุดุนูุจุฉ"},
        "ููุทูุฉ ุญููู": {"ุญููู"},
        "ููุทูุฉ ุงูุฌุงุจุฑูุฉ": {"ุงูุฌุงุจุฑูุฉ","ูุฑุทุจุฉ","ุงููุฑููู","ุงูุณุฑุฉ"},
        "ููุทูุฉ ุงูุนุงุตูุฉ": {"ุญุฏุงุฆู ุงูุณูุฑ","ุฏุณูุงู","ุงููุจูุฉ","ุงููุฑูุงุจ","ูุฏููุฉ ุงููููุช","ุงููุจุงุฑููุฉ","ุดุฑูโ"},
        "ููุทูุฉ ุงูุดููุฎ": {"ุงูุดููุฎ ุงูุตูุงุนูุฉ","ุงูุดููุฎ","ุงูุดููุฎ ุงูุณูููุฉ","ูููุงุก ุงูุดููุฎ"},
        "ููุทูุฉ ุงูุดุนุจ": {"ุถุงุญูุฉ ุนุจุฏ ุงููู ุงูุณุงูู","ุงูุฏุนูุฉ","ุงููุงุฏุณูุฉ","ุงููุฒูุฉ","ุงูููุญุงุก","ูููุงู",
                        "ุงูุดุนุจ","ุงูุฑูุถุฉ","ุงูุฎุงูุฏูุฉ","ุงูุนุฏูููุฉ","ุงูุฏุณูุฉ","ุงูุดุงููุฉ","ุงูููุตูุฑูุฉ","ุจููุฏ ุงููุงุฑ"},
        "ููุทูุฉ ุนุจุฏุงููู ุงููุจุงุฑู": {"ุงูุณูุงู","ุงูุดุฏุงุฏูุฉ","ุบุฑุจ ุนุจุฏุงููู ุงููุจุงุฑู","ุนุจุฏุงููู ุงููุจุงุฑู",
                                 "ุงูุนูุฑูุฉ","ููุทูุฉ ุงููุทุงุฑ","ุญุทูู","ุงูุดูุฏุงุก","ุตุจุญุงู","ุงูุฒูุฑุงุก",
                                 "ุงูุตุฏูู","ุงูุฑุงุจูุฉ","ูุจุฏ","ุงูุฑุญุงุจ","ุงูุถุฌูุฌ","ุงูุงูููููุฒ","ุฌููุจ ุงูุณุฑุฉ",
                                 "ุนุจุฏุงููู ูุจุงุฑู ุงูุตุจุงุญ"},
        "ุฌููุจ ุงูุดููุฎ": {"ุฌููุจ ุงูุดููุฎ","ุงูุนุจุงุณูุฉ","ุดุงุฑุน ูุญูุฏ ุจู ุงููุงุณู","ุงูุญุณุงูู"},
        "ุงููุทูุงุน": {"ุงููุทูุงุน","ุงูุนุจุฏูู","ุงูุณูุฑุงุจ"},
    }
    for area, cities in city_map.items():
        if city in cities:
            return area
    return "Other City"

# ---------- PDF table builder ----------
def df_to_pdf_table(df, title="FLASH"):
    if "ุงุฌูุงูู ุนุฏุฏ ุงููุทุน ูู ุงูุทูุจ" in df.columns:
        df = df.rename(columns={"ุงุฌูุงูู ุนุฏุฏ ุงููุทุน ูู ุงูุทูุจ": "ุนุฏุฏ ุงููุทุน"})

    final_cols = [
        'ููุฏ ุงูุงูุฑุฏุฑ', 'ุงุณู ุงูุนููู', 'ุงูููุทูุฉ', 'ุงูุนููุงู',
        'ุงููุฏููุฉ', 'ุฑูู ููุจุงูู ุงูุนููู', 'ุญุงูุฉ ุงูุงูุฑุฏุฑ',
        'ุนุฏุฏ ุงููุทุน', 'ุงูููุงุญุธุงุช', 'ุงุณู ุงูุตูู',
        'ุงูููู', 'ุงูููุงุณ', 'ุงููููุฉ',
        'ุงูุฅุฌูุงูู ูุน ุงูุดุญู'
    ]
    df = df[[c for c in final_cols if c in df.columns]].copy()

    if 'ุฑูู ููุจุงูู ุงูุนููู' in df.columns:
        df['ุฑูู ููุจุงูู ุงูุนููู'] = df['ุฑูู ููุจุงูู ุงูุนููู'].apply(
            lambda x: str(int(float(x))) if pd.notna(x) and str(x).replace('.','',1).isdigit()
            else ("" if pd.isna(x) else str(x))
        )

    safe_cols = {'ุงูุฅุฌูุงูู ูุน ุงูุดุญู','ููุฏ ุงูุงูุฑุฏุฑ','ุฑูู ููุจุงูู ุงูุนููู','ุงุณู ุงูุนููู',
                 'ุงูููุทูุฉ','ุงูุนููุงู','ุงููุฏููุฉ','ุญุงูุฉ ุงูุงูุฑุฏุฑ','ุงูููุงุญุธุงุช','ุงุณู ุงูุตูู','ุงูููู','ุงูููุงุณ'}
    for col in df.columns:
        if col not in safe_cols:
            df[col] = df[col].apply(
                lambda x: str(int(float(x))) if pd.notna(x) and str(x).replace('.','',1).isdigit()
                else ("" if pd.isna(x) else str(x))
            )

    styleN = ParagraphStyle(name='Normal', fontName='Arabic-Bold', fontSize=9,
                            alignment=1, wordWrap='RTL')
    styleBH = ParagraphStyle(name='Header', fontName='Arabic-Bold', fontSize=10,
                             alignment=1, wordWrap='RTL')
    styleTitle = ParagraphStyle(name='Title', fontName='Arabic-Bold', fontSize=14,
                                alignment=1, wordWrap='RTL')

    data = []
    data.append([Paragraph(fix_arabic(col), styleBH) for col in df.columns])
    for _, row in df.iterrows():
        data.append([Paragraph(fix_arabic("" if pd.isna(row[col]) else str(row[col])), styleN)
                     for col in df.columns])

    # ุชูุฒูุน ุนุฑุถ ุงูุฃุนูุฏุฉ (ูุฌููุน < ุนุฑุถ A4 Landscape โ 842pt)
    col_widths_cm = [2, 2, 1.5, 3, 2, 3, 1.5, 1.5, 2.5, 3.5, 1.5, 1.5, 1, 1.5]
    col_widths = [max(c * 28.35, 15) for c in col_widths_cm]

    tz = pytz.timezone('Africa/Cairo')
    today = datetime.datetime.now(tz).strftime("%Y-%m-%d")
    title_text = f"{title} | FLASH | {today}"

    elements = [
        Paragraph(fix_arabic(title_text), styleTitle),
        Spacer(1, 14)
    ]

    table = Table(data, colWidths=col_widths[:len(df.columns)], repeatRows=1)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor("#64B5F6")),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
        ('GRID', (0, 0), (-1, -1), 0.25, colors.black),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
    ]))

    elements.append(table)
    elements.append(PageBreak())
    return elements

# ---------- Streamlit App ----------
st.set_page_config(page_title="๐ฅ Flash Orders Processor", layout="wide")
st.title("๐ฅ Flash Orders Processor")
st.markdown("....ุงุฑูุน ุงููููุงุช ูุง ุฑุงูู ุนูุดุงู ุชุณุชูู ุงูุดูุช")

uploaded_files = st.file_uploader(
    "Upload Excel files (.xlsx)",
    accept_multiple_files=True,
    type=["xlsx"]
)

if uploaded_files:
    pdfmetrics.registerFont(TTFont('Arabic', 'Amiri-Regular.ttf'))
    pdfmetrics.registerFont(TTFont('Arabic-Bold', 'Amiri-Bold.ttf'))

    all_frames = []
    for file in uploaded_files:
        xls = pd.read_excel(file, sheet_name=None, engine="openpyxl")
        for _, df in xls.items():
            df = df.dropna(how="all")
            all_frames.append(df)

    if all_frames:
        merged_df = pd.concat(all_frames, ignore_index=True, sort=False)
        merged_df = replace_muaaqal_with_confirm_safe(merged_df)

        if 'ุงููุฏููุฉ' in merged_df.columns:
            merged_df['ุงููุฏููุฉ'] = merged_df['ุงููุฏููุฉ'].ffill().fillna('')
        if 'ููุฏ ุงูุงูุฑุฏุฑ' in merged_df.columns:
            merged_df['ููุฏ ุงูุงูุฑุฏุฑ'] = fill_down(merged_df['ููุฏ ุงูุงูุฑุฏุฑ'])
        if 'ุงุณู ุงูุนููู' in merged_df.columns:
            merged_df['ุงุณู ุงูุนููู'] = fill_down(merged_df['ุงุณู ุงูุนููู'])

        if 'ุงููุฏููุฉ' in merged_df.columns and 'ุงุณู ุงูุตูู' in merged_df.columns:
            prod_present = merged_df['ุงุณู ุงูุตูู'].notna() & merged_df['ุงุณู ุงูุตูู'].astype(str).str.strip().ne('')
            city_empty = merged_df['ุงููุฏููุฉ'].isna() | merged_df['ุงููุฏููุฉ'].astype(str).str.strip().eq('')
            mask = prod_present & city_empty
            if mask.any():
                city_ffill = merged_df['ุงููุฏููุฉ'].ffill()
                merged_df.loc[mask, 'ุงููุฏููุฉ'] = city_ffill.loc[mask]

        merged_df['ุงูููุทูุฉ'] = merged_df['ุงููุฏููุฉ'].apply(classify_city)
        merged_df['ุงูููุทูุฉ'] = pd.Categorical(
            merged_df['ุงูููุทูุฉ'],
            categories=[c for c in merged_df['ุงูููุทูุฉ'].unique() if c != "Other City"] + ["Other City"],
            ordered=True
        )

        merged_df = merged_df.sort_values(['ุงูููุทูุฉ','ููุฏ ุงูุงูุฑุฏุฑ'])

        buffer = io.BytesIO()
        doc = SimpleDocTemplate(
            buffer,
            pagesize=landscape(A4),
            leftMargin=15, rightMargin=15, topMargin=15, bottomMargin=15
        )
        elements = []
        for group_name, group_df in merged_df.groupby('ุงูููุทูุฉ'):
            elements.extend(df_to_pdf_table(group_df, title=str(group_name)))
        doc.build(elements)
        buffer.seek(0)

        tz = pytz.timezone('Africa/Cairo')
        today = datetime.datetime.now(tz).strftime("%Y-%m-%d")
        file_name = f"ุณูุงููู ููุงุด - {today}.pdf"

        st.success("โุชู ุชุฌููุฒ ููู PDF โ")
        st.download_button(
            label="โฌ๏ธโฌ๏ธ ุชุญููู ููู PDF",
            data=buffer.getvalue(),
            file_name=file_name,
            mime="application/pdf"
        )

